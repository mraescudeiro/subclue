########## Subclue – dump /create_produto ##########

### FILE: supabase/functions/create_produto/index.ts ###
// supabase/functions/create_produto/index.ts

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { z } from "https://deno.land/x/zod@v3.21.4/mod.ts";
import { SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2";
import { getAdminClient } from "../_lib/supabaseClientFactory.ts";

const Schema = z.object({
  titulo: z.string().min(1),
  descricao: z.string().optional(),
  preco_cents: z.number().int().nonnegative(),
  currency: z.string().length(3).default("BRL"),
  sku: z.string().optional(),
  stock_quantity: z.number().int().min(0).default(0),
  status_estoque: z.enum(["in_stock", "out_of_stock", "preorder"]).default("in_stock"),
});

function jsonResponse(body: unknown, status = 200, headers?: HeadersInit) {
  const baseHeaders = { "Content-Type": "application/json" };
  return new Response(JSON.stringify(body), {
    status,
    headers: { ...baseHeaders, ...headers },
  });
}

serve(async (req) => {
  if (req.method !== "POST") {
    return jsonResponse({ success: false, error: "Método não suportado" }, 405);
  }

  try {
    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return jsonResponse({ success: false, error: "Missing or malformed Authorization header" }, 401);
    }
    const jwt = authHeader.split(" ")[1];

    const supabase: SupabaseClient = getAdminClient();

    // Valida o usuário autenticado
    const { data: { user }, error: authError } = await supabase.auth.getUser(jwt);
    if (authError || !user) {
      return jsonResponse({ success: false, error: "JWT inválido ou usuário não encontrado" }, 401);
    }

    // Busca o parceiro correspondente ao usuário autenticado
    const { data: parceiros, error: parceiroError } = await supabase
      .from("parceiros")
      .select("id")
      .eq("owner_id", user.id)
      .limit(1);

    if (parceiroError || !parceiros || parceiros.length === 0) {
      return jsonResponse({ success: false, error: "Parceiro não encontrado para este usuário" }, 403);
    }
    const parceiro_id = parceiros[0].id;

    // Validação do payload
    const body = await req.json();
    const parse = Schema.safeParse(body);
    if (!parse.success) {
      return jsonResponse({ success: false, error: parse.error.flatten() }, 400);
    }

    // Monta o produto para inserir
    const produto = {
      ...parse.data,
      parceiro_id,
    };

    const { data, error } = await supabase
      .from("produtos")
      .insert(produto)
      .select();

    if (error) {
      console.error("Erro ao inserir produto:", error);
      return jsonResponse({ success: false, error: error.message, details: error.details }, 500);
    }
    if (!data || data.length === 0) {
      return jsonResponse({ success: false, error: "Produto não criado ou retornado. Verifique RLS, constraints, campos obrigatórios." }, 500);
    }
    return jsonResponse({ success: true, data: data[0] }, 201);

  } catch (err: any) {
    console.error("[create_produto] ERRO INESPERADO:", err);
    return jsonResponse({ success: false, error: `Internal server error: ${err.message}` }, 500);
  }
});

### FILE: supabase/migrations/20250424123000_add_slug_to_parceiros.sql ###
-- 1) adiciona a coluna slug
ALTER TABLE public.parceiros
ADD COLUMN IF NOT EXISTS slug text;

-- 2) índice único apenas para premium
CREATE UNIQUE INDEX IF NOT EXISTS parceiros_slug_idx
  ON public.parceiros(slug)
  WHERE plano = 'PREMIUM';

-- 3) popula slugs iniciais para quem é premium
UPDATE public.parceiros
SET slug = lower(regexp_replace(nome, '\s+', '-', 'g'))
WHERE slug IS NULL
  AND plano = 'PREMIUM';

########## FIM ##########
