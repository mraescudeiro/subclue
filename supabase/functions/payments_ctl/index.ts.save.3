// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

// Setup type definitions for built-in Supabase Runtime APIs
import "jsr:@supabase/functions-js/edge-runtime.d.ts"

console.log("Hello from Functions!")

Deno.serve(async (req) => {
  const { name } = await req.json()
  const data = {
    message: `Hello ${name}!`,
  }

 return new Response(
    JSON.stringify(data),
    { headers: { "Content-Type": "application/json" } },
  )
})
  1. Run `supabase start` (see: https://supabase.com/docs/reference/cli/supabase-start)
  2. Make an HTTP request:

  curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/payments_ctl' \
    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
    --header 'Content-Type: application/json' \
    --data '{"name":"Functions"}'

*/
import { serve } from "https://deno.land/std@0.149.0/http/server.ts";
import { createClient } from "https://deno.land/x/supabase@1.5.0/mod.ts";

// as variáveis abaixo já são providas pelo supabase start
const SUPABASE_URL           = Deno.env.get("SUPABASE_LOCAL_URL")!
const SERVICE_ROLE_KEY       = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!

const supabase = createClient(SUPABASE_URL, SERVICE_ROLE_KEY)

serve(async (req) => {
  // 1) parse o corpo
  const event = await req.json()

  // 2) trate o tipo de evento
  if (event.type === "checkout.session.completed") {
    const session = event.data.object
    const sessionId = session.id

    // 3) faça o update no seu banco
    const { error } = await supabase
      .from("payouts")
      .update({ status: "PAID" })
      .eq("id", sessionId)

    if (error) {
      console.error("erro ao dar update:", error)
      return new Response(
        JSON.stringify({ error: error.message }),
        { status: 500 }
      )
    }

    // 4) responda!
    return new Response(
      JSON.stringify({ received: true, id: sessionId }),
      { status: 200 }
    )
  }

  // se for outro evento
  return new Response(
    JSON.stringify({ message: "Evento ignorado" }),
    { status: 200 }
  )
})
