// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

/ deno-lint-ignore-file no-explicit-any
import { serve } from "https://deno.land/std@0.203.0/http/server.ts";
import Stripe from "https://esm.sh/stripe@12.19.0?target=deno";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const stripe = new Stripe(Deno.env.get("STRIPE_SECRET")!, {
  apiVersion: "2023-10-16",
});
const supabase = createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
);

serve(async (req) => {
  const sig = req.headers.get("stripe-signature")!;
  const body = await req.text();

  let event: Stripe.Event;
  try {
    event = stripe.webhooks.constructEvent(
      body,
      sig,
      Deno.env.get("STRIPE_WEBHOOK_SECRET")!
    );
  } catch (err) {
    return new Response(`Webhook Error: ${err}`, { status: 400 });
  }

  // IdempotÃªncia
  const { error: dup } = await supabase
    .from("webhook_logs")
    .insert({ event_id: event.id });
  if (dup && dup.code === "23505") return new Response("duplicate", { status: 200 });

  switch (event.type) {
    case "checkout.session.completed": {
      const s = event.data.object as Stripe.Checkout.Session;
      await supabase.from("assinantes").insert({
        user_id: s.customer_email,
        stripe_subscription_id: s.subscription,
        status: "ACTIVE",
        current_period_end: new Date((s.expires_at ?? 0) * 1000),
      });
      await supabase.from("transacoes").insert({
        valor_bruto: s.amount_total! / 100,
        valor_liq: s.amount_total! / 100 - (s.application_fee_amount! / 100),
        application_fee: s.application_fee_amount! / 100,
        currency: s.currency.toUpperCase(),
      });
      break;
    }
    case "invoice.payment_failed": {
      const inv = event.data.object as Stripe.Invoice;
      await supabase
        .from("assinantes")
        .update({ status: "PAST_DUE" })
        .eq("stripe_subscription_id", inv.subscription);
      break;
    }
    case "payout.paid": {
      const p = event.data.object as Stripe.Payout;
      await supabase
        .from("payouts")
        .update({ status: "PAID" })
        .eq("id", p.metadata?.payout_id || 0);
      break;
    }
  }

  return new Response(JSON.stringify({ received: true }), { status: 200 });
});

// Setup type definitions for built-in Supabase Runtime APIs
T^Z
port "jsr:@supabase/functions-js/edge-runtime.d.ts"

console.log("Hello from Functions!")

Deno.serve(async (req) => {
  const { name } = await req.json()
  const data = {
    message: `Hello ${name}!`,
  }

  return new Response(
    JSON.stringify(data),
    { headers: { "Content-Type": "application/json" } },
  )
})

/* To invoke locally:

  1. Run `supabase start` (see: https://supabase.com/docs/reference/cli/supabase-start)
  2. Make an HTTP request:

  curl -i --location --request POST 'http://127.0.0.1:54321/functions/v1/payments_ctl' \
    --header 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
    --header 'Content-Type: application/json' \
    --data '{"name":"Functions"}'

*/
